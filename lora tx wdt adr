// LoRa 9x_TX
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messaging client (transmitter)
// with the RH_RF95 class. RH_RF95 class does not provide for addressing or
// reliability, so you should only use RH_RF95 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example LoRa9x_RX
#include <MCP980X.h>      //http://github.com/JChristensen/MCP980X
#include <SPI.h>
#include <RH_RF95.h>
#include "Wire.h"
#include "LowPower.h"

#define RFM95_CS 10
#define RFM95_RST 9
#define RFM95_INT 2
#define WDI 7
#define VCMSB 1; //MSB cast vyrobniho cisla 0-127 pouzije se jako krat 256
#define VCLSB 2; //LSB cast vyrobniho cisla 0-255 ale u MSB 127 je LSB take max127 a dost

MCP980X mySensor(0);

float C;//teplota
int teplota; //cele cislo


// Change to 434.0 or other frequency, must match RX's freq!
#define RF95_FREQ 868.1

// Singleton instance of the radio driver
RH_RF95 rf95(RFM95_CS, RFM95_INT);

void setup() 
{
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);
  
  pinMode(WDI, OUTPUT);
  digitalWrite(WDI, HIGH);

  while (!Serial);
  Serial.begin(9600);
  delay(100);
  //vypisy pres modbus
pinMode(5,OUTPUT);
digitalWrite(5, HIGH);
Serial.println("jsem v SETUP");
Serial.println("seriovy port modbus rfm95 master");
  Serial.println("Arduino LoRa TX Test!");

 mySensor.begin();        //initialize the hardware
       mySensor.writeConfig(ADC_RES_10BITS);       //max resolution, 0.0625 Â°C
    mySensor.writeTempC2(HYSTERESIS, 0 * 2);    //freezing
    mySensor.writeTempC2(LIMITSET, 100 * 2);    //boiling
  
  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  while (!rf95.init()) {
    Serial.println("LoRa radio init failed");
    while (1);
  }
  Serial.println("LoRa radio init OK!");

  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ)) {
    Serial.println("setFrequency failed");
    while (1);
  }
  if (!rf95.setModemConfig(RH_RF95::Bw125Cr48Sf512)) {
    Serial.println("setConfig failed");
    while (1);
  }
  
  Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);
  
  Serial.print("registry: "); 
  rf95.printRegisters();
  
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then 
  // you can set transmitter powers from 5 to 23 dBm:
  //rf95.setTxPower(23, false);
  //rf95.setTxPower(10, false);
  rf95.setTxPower(0, false);
}

int16_t packetnum = 0;  // packet counter, we increment per xmission

void loop()
{
  
  C = mySensor.readTempC16(AMBIENT) / 16.0;
    //Serial.print("Teplota = ");
    //Serial.println(C-1.0);
    teplota = int(10.0*(C-1.5));
 
    
  
   Serial.println(teplota);
   
  Serial.println("Sending to rf95_prijimac");
  // Send a message to rf95_server
  
  char radiopacket[20] = "Hello World #      ";
  itoa(packetnum++, radiopacket+13, 10);
  itoa(teplota, radiopacket+0, 10);
  
  // cislo jako int, kam, desitkova soustava
  Serial.print("Sending "); Serial.println(radiopacket);
  //vyrobni cislo jsou 2 byte 3x zopakovane
  radiopacket[6] = VCMSB; //*256
  radiopacket[7] = VCLSB; //127*256+127=32767 max pak je to zaporne
  //128 a 0 je dohromady -32768
  radiopacket[8] = VCMSB; //256
  radiopacket[9] = VCLSB; //256+1=257
  radiopacket[10] = VCMSB; //256
  radiopacket[11] = VCLSB; //256+1=257
  radiopacket[19] = 0;
  
  Serial.println("Sending..."); delay(10);
  rf95.send((uint8_t *)radiopacket, 20);

  Serial.println("Waiting for packet to complete..."); delay(10);
  rf95.waitPacketSent();

Serial.println("za cekanim na odeslani"); delay(10);

  // Now wait for a reply
/*
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);

 Serial.println("Waiting for reply..."); delay(10);
  if (rf95.waitAvailableTimeout(1000))
  { 
    // Should be a reply message for us now   
    if (rf95.recv(buf, &len))
   {
      Serial.print("Got reply: ");
      Serial.println((char*)buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);    
    }
    else
    {
      Serial.println("Receive failed");
    }
    
    
  }
  else
  {
    Serial.println("No reply, is there a listener around?");
  }
  */
  while (!rf95.sleep()) {
    Serial.println("LoRa radio se neuspalo");
    while (1);
  }
  Serial.println("LoRa radio chrape!");
  
    mySensor.writeConfig(SHUTDOWN);       //melo by se uspat
    //mySensor.writeConfig(ONE_SHOT);       //musi byt oba prikazy aby se uspalo
    
  
  Serial.println("ted se uspim, zatim jen procesor"); delay(500);
  LowPower.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF); //uspi se
  delay(100);
}

//konec loop
